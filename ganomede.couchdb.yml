---
- hosts: marathon-api-server
  gather_facts: no

  vars:
    app_name: "{{ config.app_name }}/couchdb"
    dns_domain: "{{ config.app_name.split('/') | reverse | join('.') }}.marathon.mesos"
    marathon_wait_for_deployment: False

    # index of the server to act on (0 or 1).
    # aimed at being specified on the command line.
    index: -1

    couchdb_host: "{{ config.couchdb.hosts[index|int] }}"
    couchdb_databases:
      - "{{ config.app_name.split('/') | join('-') }}-admin"
      - "{{ config.app_name.split('/') | join('-') }}-avatars"
      - "{{ config.app_name.split('/') | join('-') }}-challenges"
      - "{{ config.app_name.split('/') | join('-') }}-games"
      - "{{ config.app_name.split('/') | join('-') }}-vcurrency"
      - "{{ config.app_name.split('/') | join('-') }}-directory"

    marathon_app_id: "/{{ app_name }}-{{ index }}"

  pre_tasks:
    - fail: msg="Please specify the index(0 or 1) with \"-e index=0\""
      when: (index|int) < 0 or (index|int) > 1
      tags: [ 'couchdb' ]

  tasks:
  - name: Install compact database cron jobs
    cron:
      name: "compact {{ app_name }} {{ item }} on couchdb-{{ index }}"
      hour: 2
      minute: 0
      job: >
        /usr/bin/curl
        -H "Content-Type: application/json"
        -X POST
        "http://couchdb-{{index}}.{{dns_domain}}:{{config.couchdb.port}}/{{item}}/_compact"
    with_items: "{{ couchdb_databases }}"
    tags: [ 'couchdb' ]

  - name: Install replicator script
    template:
      src: ganomede.couchdb.replicator.sh
      dest: /root/setup-{{ config.app_name.split('/') | join('-') }}-replicator-{{ couchdb_host }}.sh
      mode: 0755
    tags: [ 'replicator', 'couchdb' ]

  - name: Run replicator script
    command: /root/setup-{{ config.app_name.split('/') | join('-') }}-replicator-{{ couchdb_host }}.sh
    tags: [ 'replicator', 'couchdb' ]

  roles:
  - role: topface.marathon_app
    tags: [ 'marathon', 'couchdb' ]
    marathon_url: http://{{ inventory_hostname }}:8080
    marathon_app:
      id: "{{ marathon_app_id }}"
      container:
        type: DOCKER
        docker:
          image: jeko/couchdb:1.6.1
          network: HOST
        volumes:
          - containerPath: /usr/local/var/lib/couchdb
            hostPath: /usr/local/{{ cluster_name }}/{{ app_name }}
            mode: RW
      env:
        COUCHDB_HTTP_PORT: "{{ config.couchdb.port }}"
        COUCHDB_HTTP_BIND_ADDRESS: "{{ hostvars[couchdb_host].tun0 }}"
      instances: 1
      cpus: "{{ config.couchdb.cpus | default(0.1) }}"
      mem: "{{ config.couchdb.mem | default(256) }}"
      healthChecks:
        - protocol: HTTP
          port: "{{ config.couchdb.port }}"
          path: /
          gracePeriodSeconds: 120
          maxConsecutiveFailures: 3
          intervalSeconds: 20
          timeoutSeconds: 20
      constraints:
        - [ "hostname", "CLUSTER", "{{ couchdb_host }}" ]

      # Only one instance of CouchDB should run at any point in time.
      upgradeStrategy:
        minimumHealthCapacity: 0
        maximumOverCapacity: 0

